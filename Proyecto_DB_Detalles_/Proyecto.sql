--<<<<<<<<<<<<<<<<<<<<<<<<<<PROCEDIMIENTOS DE ALMACENADO>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>INICIO
--- creando una procedimiento para cargar los registros de la base de datos al datagrid de la visual
SELECT * FROM POSTULANT;

CREATE OR REPLACE PROCEDURE GUARDAR_POSTULACIONES(AP_REGISTROS OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN AP_REGISTROS FOR SELECT * FROM  POSTULANT;
END;
-------------------------------------------------

--------------- PUEBLO ORIGINARIO
--SELECT
SELECT * FROM INDIGENOUS_SECTION;
----------------------
CREATE OR REPLACE PROCEDURE PA_PUEBLO_ORIGINARIO(P_INDIGENA VARCHAR2, P_PUNTAJE OUT NUMBER)
IS 
V_DESCR_PUNTA VARCHAR2(50);
BEGIN
  SELECT DESCRIPCION INTO V_DESCR_PUNTA FROM INDIGENOUS_SECTION WHERE P_INDIGENA = DESCRIPCION;
  IF V_DESCR_PUNTA = 'SI' THEN
    P_PUNTAJE:= 500;
    ELSIF V_DESCR_PUNTA = 'NO' THEN
    P_PUNTAJE:= 0;
    END IF;
END PA_PUEBLO_ORIGINARIO;
-----------PRUEBA
DECLARE
    V_CANT_PROCESADOS NUMBER;
BEGIN
    PA_PUEBLO_ORIGINARIO('NO',V_CANT_PROCESADOS);
    DBMS_OUTPUT.PUT_LINE('PUNTAJE: '|| V_CANT_PROCESADOS);
END;
----------------------TITULO----------------------------

SELECT * FROM SECTION_TITLE;
-------SELECT
CREATE OR REPLACE PROCEDURE PA_TITULO(P_TITULO VARCHAR2, P_PUNTAJE OUT NUMBER)
IS 
V_DESCR_TITULO VARCHAR2(50);
BEGIN
  SELECT DESCRIPCION INTO V_DESCR_TITULO FROM SECTION_TITLE WHERE P_TITULO = DESCRIPCION;
  IF V_DESCR_TITULO = 'PROFESIONAL' THEN
    P_PUNTAJE:= 200;
  ELSIF V_DESCR_TITULO = 'TECNICO' THEN
    P_PUNTAJE:= 100;
  ELSIF V_DESCR_TITULO = 'NO POSEE' THEN
    P_PUNTAJE:= 0;
  END IF;
END PA_TITULO;

----------------PRUEBA

DECLARE
    V_CANT_PROCESADOS NUMBER;
BEGIN
    PA_TITULO('NO POSEE',V_CANT_PROCESADOS);
    DBMS_OUTPUT.PUT_LINE('PUNTAJE: '|| V_CANT_PROCESADOS);
END;

-----------------------------------------REGIONES----------------------------------
---SELECT
SELECT * FROM LIVING_PLACE;
SELECT * FROM REGIONS;
--------------------------------------------
CREATE OR REPLACE PROCEDURE PA_PUNTAJE_REGION(P_PUNTAJE_IN NUMBER, P_REGION VARCHAR2, P_PUNTAJE_OUT OUT NUMBER)
IS
V_REGION VARCHAR2(100);
BEGIN
  
SELECT DESCRIPCION INTO V_REGION FROM REGIONS WHERE P_REGION = DESCRIPCION;
  IF V_REGION = 'METROPOLITANA' THEN
    P_PUNTAJE_OUT:=P_PUNTAJE_IN;
  ELSIF V_REGION = 'ARICA Y PARINACOTA' THEN
    P_PUNTAJE_OUT:=P_PUNTAJE_IN + (P_PUNTAJE_IN * 0.5);
  ELSIF V_REGION = 'TARAPACA' THEN
    P_PUNTAJE_OUT:=P_PUNTAJE_IN + (P_PUNTAJE_IN * 0.3);
  ELSIF V_REGION = 'AYSEN DEL GENERAL CARLOS IBANEZ DEL CAMPO' THEN
    P_PUNTAJE_OUT:=P_PUNTAJE_IN + (P_PUNTAJE_IN * 1);
  ELSIF V_REGION = 'MAGALLANES Y DE LA ANTARTICA CHILENA' THEN
    P_PUNTAJE_OUT:=P_PUNTAJE_IN + (P_PUNTAJE_IN * 1.3);
  END IF;
END PA_PUNTAJE_REGION;
---------------PRUEBA
DECLARE
    V_CANT_PROCESADOS NUMBER;
BEGIN
    PA_PUNTAJE_REGION(1000,'MAGALLANES Y DE LA ANTARTICA CHILENA',V_CANT_PROCESADOS);
    DBMS_OUTPUT.PUT_LINE('PUNTAJE: '|| V_CANT_PROCESADOS);
END;


--<<<<<<<<<<<<<<<<<<<<<<<<<<PROCEDIMIENTOS DE ALMACENADO>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>FIN
--<---------<-------------------<------------<----------------<--<---------<-------------------<------------<----------------<
--<---------<--------------FUNCIONES--<---------<-------------------<------------<----------------<INICIO
---MONTO MINIMO DE POSTULACION 8M, BANCO, SALDO COMPRABADO ENTREGADO AL MINVU 
SELECT * FROM SAVING; -- SALDOS DE POSTULANTES
SELECT * FROM POSTULANT; -- INFORMACION POSTULANTE
SELECT * FROM SAVING_SECTION; -- TABLA DE MONTOS DE AHORROS
-------------------FUNCION DE LO QUE AHORRO EL WEON EN EL BANCO
CREATE OR REPLACE FUNCTION FN_PUNTAJE_BANCO (P_SALDO NUMBER)
RETURN NUMBER
IS 
  V_PUNTAJE NUMBER;

BEGIN
  SELECT PUNTAJE INTO V_PUNTAJE FROM  SAVING_SECTION WHERE P_SALDO BETWEEN MONTO_MIN AND MONTO_MAX;
  RETURN V_PUNTAJE;
END FN_PUNTAJE_BANCO;

------- PRUEBA
SELECT RUT_ID,FN_PUNTAJE_BANCO(MONTO_AHORRADO)AS PUNTAJE_BANCO FROM SAVING;


----------------FUNCION CARGA FAMILIAR 
---ESTA FUNCION EXTRAE EL ESTADO CIVIL DE CADA POSTULANTE  SE AGREGA A UN PACKAGE INDEPENDIENTE 
SELECT * FROM POSTULANT;

----
CREATE OR REPLACE FUNCTION FN_ESTADO_CIVIL(P_ESTADO VARCHAR2)
RETURN VARCHAR2
IS
  V_ESTADO_CIVIL VARCHAR2(50);
BEGIN
  SELECT ESTADO_CIVIL INTO V_ESTADO_CIVIL FROM POSTULANT WHERE P_ESTADO = RUT_ID;
  RETURN V_ESTADO_CIVIL;
END FN_ESTADO_CIVIL; 
---PRUEBA
SELECT RUT_ID, FN_ESTADO_CIVIL(RUT_ID) FROM POSTULANT;

-----------------OBTENER PUNTAJE DE ESTADOS CIVILES----------------
CREATE OR REPLACE FUNCTION FN_PUNTAJE_ESTADO_CIVIL(P_ESTADO_PUNTAJE NUMBER)
RETURN NUMBER
IS
V_PUNTAJE NUMBER;
BEGIN
SELECT PUNTAJE INTO V_PUNTAJE FROM CIVIL_STATUS_SECTION WHERE P_ESTADO_PUNTAJE = COD_EST_CIVIL;

RETURN V_PUNTAJE;

END FN_PUNTAJE_ESTADO_CIVIL;
-------------PRUEBA
SELECT RUT_ID,FN_PUNTAJE_ESTADO_CIVIL(COD_EST_CIVIL) AS PUNTAJE FROM POSTULANT;

-------------------------------------------------------------------------------------------
----- FUNCION CALCULAR EDAD
CREATE OR REPLACE FUNCTION FN_CALCULO_EDAD(P_FECHA_NACIMIENTO DATE)
RETURN NUMBER
IS
    V_EDAD NUMBER;
BEGIN
    V_EDAD := ROUND(MONTHS_BETWEEN(SYSDATE,P_FECHA_NACIMIENTO)/12);
    RETURN V_E_EDAD;
END FN_CALCULO_EDAD;

----------------------------------------
--PRUEBA
SELECT FN_CALCULO_EDAD(FECHA_NAC) FROM postulant;
--------------------------------------------------------------
-----------------ENTREGA PUNTAJE DEPENDIENDO EL RANGO DE EDAD
CREATE OR REPLACE FUNCTION FN_RECORRER_EDAD(P_EDAD NUMBER)
RETURN NUMBER
IS
    V_PUNTAJE NUMBER;
BEGIN
    SELECT PUNTAJE INTO V_PUNTAJE FROM AGE WHERE P_EDAD BETWEEN EDAD_MIN AND EDAD_MAX;
    RETURN V_PUNTAJE;
END FN_RECORRER_EDAD;

-----------------------------------------------------------
-------- ENTREGA LA CANTIDAD DE HIJOS QUE POSEE EL SOLICITANTE
CREATE OR REPLACE FUNCTION FN_CALCULO_CARGAS(P_RUT_ID VARCHAR2)
RETURN NUMBER
IS
    V_CANTIDAD_CARGAS NUMBER;
BEGIN

    SELECT (COUNT(RUT_CARGA)) INTO V_CANTIDAD_CARGAS FROM family_responsibilities WHERE RUT_ID = P_RUT_ID;
    RETURN V_CANTIDAD_CARGAS;
END FN_CALCULO_CARGAS;

--------------PRUEBA
SELECT RUT_ID, NOMBRES, FN_CALCULO_CARGAS(RUT_ID) FROM family_responsibilities;
----------------------------------------------------------------------------------
--------ENTREGA PUNTAJE SEGUN CARGA FAMILIAR
CREATE OR REPLACE FUNCTION FN_PUNTAJE_CARGA_FAMILIAR(P_NUM_CARGAS NUMBER)
RETURN NUMBER
IS
    V_PUNTAJE NUMBER;

BEGIN

    SELECT PUNTAJE INTO V_PUNTAJE FROM section_family_loads WHERE P_NUM_CARGAS BETWEEN CARGAS_MIN AND cargas_max;
    RETURN V_PUNTAJE;
END FN_PUNTAJE_CARGA_FAMILIAR;

-----------------------PRUEBA
SELECT FN_PUNTAJE_CARGA_FAMILIAR(FN_CALCULO_CARGAS(RUT_ID)) PUNTAJE, rut_carga FROM family_responsibilities;
--------------------------------------------------------------------------------------------------

--<---------<--------------FUNCIONES--<---------<-------------------<------------<----------------<FIN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--**********************************PACKAGE***********************************************************************INICIO
-----<<<<<<<<<<< CREACION DE LOS PACKAGES >>>>>>>>>>>>>

CREATE OR REPLACE PACKAGE PKG_9_1_OBTENER_DATOS
IS
    --DECLARACION DE FUNCIONES CARGAS FAMILIARES
    
    FUNCTION FN_CALCULO_CARGAS(P_RUT_ID VARCHAR2) RETURN NUMBER;
    FUNCTION FN_ESTADO_CIVIL(P_ESTADO VARCHAR2) RETURN VARCHAR2;
    
 
END PKG_9_1_OBTENER_DATOS;

--CUERPO PACKAGE (PRIVADO)
CREATE OR REPLACE PACKAGE BODY PKG_9_1_OBTENER_DATOS IS

    
    -- INICIO CUERPO DE FUNCIONES CARGAS FAMILIARES
    
    FUNCTION FN_CALCULO_CARGAS(P_RUT_ID VARCHAR2)
    RETURN NUMBER
    IS
        V_CANTIDAD_CARGAS NUMBER;

    BEGIN

        SELECT (COUNT(RUT_CARGA)) INTO V_CANTIDAD_CARGAS FROM family_responsibilities WHERE RUT_ID = P_RUT_ID;
        RETURN V_CANTIDAD_CARGAS;



    END FN_CALCULO_CARGAS;

----------------OBTIENE SI EL TIPO ES CASADO, DIVORCIADO O LO QUE SEA
    
    FUNCTION FN_ESTADO_CIVIL(P_ESTADO VARCHAR2)
    RETURN VARCHAR2
    IS
        V_ESTADO_CIVIL VARCHAR2(50);
    BEGIN
        SELECT ESTADO_CIVIL INTO V_ESTADO_CIVIL FROM POSTULANT WHERE P_ESTADO = RUT_ID;
        RETURN V_ESTADO_CIVIL;
    END FN_ESTADO_CIVIL; 
---PRUEBA
    SELECT RUT_ID, FN_ESTADO_CIVIL(RUT_ID) FROM POSTULANT;

-

END PKG_9_1_OBTENER_DATOS;



----------------<<<<<<<<<<<<<CREACION DE PACKAGE>>>>>>>>>>>>>>>>>



CREATE OR REPLACE PACKAGE PKG_9_2_PUNTAJES
IS
    FUNCTION FN_PUNTAJE_CARGA_FAMILIAR(P_NUM_CARGAS NUMBER) RETURN NUMBER;
    FUNCTION FN_PUNTAJE_BANCO (P_SALDO NUMBER) RETURN NUMBER;    
   
END PKG_9_2_PUNTAJES;

--CUERPO PACKAGE (PRIVADO)
CREATE OR REPLACE PACKAGE BODY PKG_9_2_PUNTAJES IS

----------OBTIENE EL PUNTAJE SEGUN LAS CARGAS FAMILIARES------
    FUNCTION FN_PUNTAJE_CARGA_FAMILIAR(P_NUM_CARGAS NUMBER)
    RETURN NUMBER
    IS
        V_PUNTAJE NUMBER;

    BEGIN

        SELECT PUNTAJE INTO V_PUNTAJE FROM section_family_loads WHERE P_NUM_CARGAS BETWEEN CARGAS_MIN AND cargas_max;
        RETURN V_PUNTAJE;
    
    END FN_PUNTAJE_CARGA_FAMILIAR;

--
    SELECT FN_PUNTAJE_CARGA_FAMILIAR(FN_CALCULO_CARGAS(RUT_ID)) PUNTAJE, rut_carga FROM family_responsibilities;
    
    
    -------------------FUNCION DE LO QUE AHORRO EL WEON EN EL BANCO
    
    FUNCTION FN_PUNTAJE_BANCO (P_SALDO NUMBER)
    RETURN NUMBER
    IS 
        V_PUNTAJE NUMBER;

    BEGIN
        SELECT PUNTAJE INTO V_PUNTAJE FROM  SAVING_SECTION WHERE P_SALDO BETWEEN MONTO_MIN AND MONTO_MAX;
        RETURN V_PUNTAJE;
    END FN_PUNTAJE_BANCO;

------- PRUEBA
    SELECT RUT_ID,FN_PUNTAJE_BANCO(MONTO_AHORRADO)AS PUNTAJE_BANCO FROM SAVING;

  

END PKG_9_2_PUNTAJES;


---------------<<<<<<<<<<<<<<<<<< CREACION DE PACKAGE >>>>>>>>>>>>>>>>>>

CREATE OR REPLACE PACKAGE PKG_REST_PUNTAJES
IS
    FUNCTION FN_PUNTAJE_ESTADO_CIVIL(P_ESTADO_PUNTAJE NUMBER) RETURN NUMBER;  
    PROCEDURE GUARDAR_POSTULACIONES(AP_REGISTROS OUT SYS_REFCURSOR);
    PROCEDURE PA_PUEBLO_ORIGINARIO(P_INDIGENA VARCHAR2, P_PUNTAJE OUT NUMBER);
    PROCEDURE PA_TITULO(P_TITULO VARCHAR2, P_PUNTAJE OUT NUMBER);
    FUNCTION FN_CALCULO_EDAD(P_FECHA_NACIMIENTO DATE) RETURN NUMBER;
    FUNCTION FN_RECORRER_EDAD(P_EDAD NUMBER) RETURN NUMBER;
    
END PKG_REST_PUNTAJES;

--CUERPO PACKAGE (PRIVADO)
CREATE OR REPLACE PACKAGE BODY PKG_REST_PUNTAJES IS


---------------OBTIENE EL PUNTAJE POR ESTADO CIVIL 


    FUNCTION FN_PUNTAJE_ESTADO_CIVIL(P_ESTADO_PUNTAJE NUMBER)
    RETURN NUMBER
    IS
        V_PUNTAJE NUMBER;
    BEGIN
        SELECT PUNTAJE INTO V_PUNTAJE FROM CIVIL_STATUS_SECTION WHERE P_ESTADO_PUNTAJE = COD_EST_CIVIL;

        RETURN V_PUNTAJE;

    END FN_PUNTAJE_ESTADO_CIVIL;



--- creando una procedimiento para cargar los registros de la base de datos al datagrid de la visual


    PROCEDURE GUARDAR_POSTULACIONES(AP_REGISTROS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN AP_REGISTROS FOR SELECT * FROM  POSTULANT;
    END GUARDAR_POSTULACIONES;



---------------FUNCTION PUEBLO ORIGINARIO

----------------- OBTIENE LOS PUNTAJES SI PERTENECE A UN PUEBLO INDIGENA


    PROCEDURE PA_PUEBLO_ORIGINARIO(P_INDIGENA VARCHAR2, P_PUNTAJE OUT NUMBER)
    IS 
    V_DESCR_PUNTA VARCHAR2(50);
    BEGIN
        SELECT DESCRIPCION INTO V_DESCR_PUNTA FROM INDIGENOUS_SECTION WHERE P_INDIGENA = DESCRIPCION;
        IF V_DESCR_PUNTA = 'SI' THEN
            P_PUNTAJE:= 500;
        ELSIF V_DESCR_PUNTA = 'NO' THEN
            P_PUNTAJE:= 0;
        END IF;
    END PA_PUEBLO_ORIGINARIO;



----------------------FUNCION DE POSEER TITUTLO

--------------- OBTIEN EL PUNTAJE POR SI TIENE TITULO O NO


    PROCEDURE PA_TITULO(P_TITULO VARCHAR2, P_PUNTAJE OUT NUMBER)
    IS 
        V_DESCR_TITULO VARCHAR2(50);
    BEGIN
        SELECT DESCRIPCION INTO V_DESCR_TITULO FROM SECTION_TITLE WHERE P_TITULO = DESCRIPCION;
        IF V_DESCR_TITULO = 'PROFESIONAL' THEN
            P_PUNTAJE:= 200;
        ELSIF V_DESCR_TITULO = 'TECNICO' THEN
            P_PUNTAJE:= 100;
        ELSIF V_DESCR_TITULO = 'NO POSEE' THEN
            P_PUNTAJE:= 0;
        END IF;
END PA_TITULO;
-------------------------------------------------------------------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-------------OBTIENE EL VALOR DE LA EDAD DE LOS POSTULANTES

    FUNCTION FN_CALCULO_EDAD(P_FECHA_NACIMIENTO DATE)
    RETURN NUMBER
    IS
        V_EDAD NUMBER;
    BEGIN
        V_EDAD := ROUND(MONTHS_BETWEEN(SYSDATE,P_FECHA_NACIMIENTO)/12);
        RETURN V_E_EDAD;
    END FN_CALCULO_EDAD;

---------------OBTIENE EL PUNTAJE DE ACUERDO AL RANGO DE EDAD

    FUNCTION FN_RECORRER_EDAD(P_EDAD NUMBER)
    RETURN NUMBER
    IS
        V_PUNTAJE NUMBER;
    BEGIN
        SELECT PUNTAJE INTO V_PUNTAJE FROM AGE WHERE P_EDAD BETWEEN EDAD_MIN AND EDAD_MAX;
        RETURN V_PUNTAJE;
    END FN_RECORRER_EDAD;
END PKG_REST_PUNTAJES;
--**********************************PACKAGE***********************************************************************FIN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------CREANDO TRIGGER QUE ACTIVA LAS SUMAS TOTALES-----------------------------CREANDO TRIGGER QUE ACTIVA LAS SUMAS TOTALES

--DEBERA SUMAR TODOS LOS PUNTAJES Y ASIGNARLE EL VALOR DE LA REGION
CREATE OR REPLACE TRIGGER TR_TOTAL
BEFORE INSERT ON SCORE
FOR EACH ROW
DECLARE
BEGIN
:=PCK.FN_PUNTAJE_EDAD +

IND
END TR_TOTAL;

--- SELECT 
SELECT * FROM FAROVED;
SELECT * FROM SCORE;

--------------------

--------------------------------------------------------------------------------------------------







